#/usr/bin/env bash

declare -a separators=( '-' '_' '!' '@' '&' '*' '+' '=' \
    '~' '`' '#' '%' '^' '+' \
    '1' '2' '3' '4' '5' '6' '7' '8' '9' '0' )
declare -a start_brackets=( '(' '{' '[' '<' )
declare -a end_brackets=( ')' '}' ']' '>' )

bracketize=0
surround=0

while getopts ":n:d:bs" opt; do
    case $opt in
        n)
            if (( $OPTARG > 0 )); then
                word_count=$OPTARG
            else
                echo "Argument to -${opt} should be an integer."
                exit -1
            fi
            ;;
        d)
            if [[ -r $OPTARG ]]; then
                dictionary_file=$OPTARG
            else
                echo "Argument to -${opt} should be the path to a readable file."
                exit -1
            fi
            ;;
        b)
            bracketize=1
            ;;
        s)
            surround=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
  esac
done

# if no word list file was specified with -d, attempt to
# use a myspell dictionary file in the user's language
if [[ -z $dictionary_file ]] && [[ -n $LANG ]]; then
    dictionary_file=/usr/share/myspell/${LANG/%.*/}.dic
    if [[ ! -r $dictionary_file ]]; then
        echo "Was attempting to use words from ${dictionary_file}."
        echo "but this file does does not exist or cannot be read."
        echo
        echo "Try specifying a valid path to a file containg a list of words"
        echo "with the -d option."
        exit -1
    fi
fi

# Breakdown of grep expressions:
#  '^[[:alpha:]]{4,8}$' : only show lines with between 4 to 8 alphabetical characters
# Breakdown of sed expressions:
#  's/\/.*//g' : remove the trailing /blah where matched
words=($(grep -E '^[[:alpha:]]{4,8}$' $dictionary_file | sed -e 's/\/.*//g' | shuf -n ${word_count:-3}))

for word in "${words[@]}"; do
    if (( $bracketize == 1 )); then
        b=$((RANDOM%${#start_brackets[*]}))
        password=$password${start_brackets[$b]}$word${end_brackets[$b]}
        unset b
    else
        password=$password$word
    fi
    if [[ ${word} != ${words[$((${#words[*]} - 1))]} ]]; then
        s=$((RANDOM%${#separators[*]}))
        password=$password${separators[s]}
        unset s
    fi
done

if (( $surround == 1 )); then
        s1=$((RANDOM%${#separators[*]}))
        s2=$((RANDOM%${#separators[*]}))
        password=${separators[s1]}$password${separators[s2]}
        unset s1 s2
fi

echo -n $password
unset password

exit 0
